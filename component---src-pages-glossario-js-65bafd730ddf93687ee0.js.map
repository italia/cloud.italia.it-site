{"version":3,"file":"component---src-pages-glossario-js-65bafd730ddf93687ee0.js","mappings":"4MAKO,MAAMA,EAAiBC,IAAA,IAAC,OAC7BC,EAAM,SACNC,EAAQ,OACRC,EAAM,KACNC,EAAI,gBACJC,EAAkB,GAAE,cACpBC,EAAgB,GAAE,WAClBC,GACDP,EAAA,OACCQ,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACC,EAAAA,EAAe,CACdR,OAAQA,EACRC,SAAUA,EACVQ,KAAMH,EACNI,UAAWC,IAAWP,EAAiB,CAAE,YAAaJ,KAErDE,KAEHK,EAAAA,cAACK,EAAAA,GAAa,CAACZ,OAAQA,EAAQU,UAAWL,GACvCF,KAEF,C,wFCtBE,MAAMU,EAAOd,IAA2E,IAA1E,QAAEe,EAAU,GAAE,SAAEC,GAAW,EAAI,iBAAEC,GAAmB,EAAI,SAAEC,GAAUlB,EACvF,MAAMmB,EAAcP,IAAW,OAAQ,CACrC,aAA0B,YAAZG,EACd,kBAA+B,UAAZA,IAEfK,EAAiBR,IAAW,YAAa,CAC7C,UAAWK,EACX,eAAgBD,IAElB,OACER,EAAAA,cAAA,OAAKG,UAAWQ,GACdX,EAAAA,cAAA,OAAKG,UAAWS,GAAiBF,GAC7B,C,qECZV,MAAMG,GAAYC,E,QAAAA,IAAgB,CAChClB,KAAM,CACJmB,SAAU,YAIDC,EAAWxB,IAAe,IAAd,KAAEyB,GAAMzB,EAC/B,MAAM0B,EAAUL,IAChB,OAAOb,EAAAA,cAAA,OAAKG,UAAWe,EAAQtB,KAAMuB,wBAAyB,CAAEC,OAAQH,IAAU,C,+ECR7E,MAAMI,EAAY7B,IAAA,IAAC,OAAE8B,EAAS,KAAI,MAAEC,EAAK,UAAEpB,EAAY,GAAE,IAAEqB,EAAM,MAAMhC,EAAA,OAC5EQ,EAAAA,cAACwB,EAAG,CAACrB,UAAU,WACZmB,EACCtB,EAAAA,cAACyB,EAAAA,GAAI,CAACC,GAAIJ,EAAQnB,UAAW,wBAAwBA,KAClDoB,GAGHvB,EAAAA,cAAA,QAAMG,UAAWA,GAAYoB,GAE3B,C,o/TCNR,MAAMV,GAAYC,EAAAA,EAAAA,IAAgB,CAChCa,KAAM,CACJ,UAAW,CACTC,GAAI,CACFC,YAAa,QAEfC,GAAI,CACFC,aAAc,QAEhB,aAAc,CACZC,MAAO,sBAMFC,EAAezC,IAAgD,IAA/C,KAAE0C,EAAI,wBAAEC,GAA0B,GAAO3C,EACpE,MAAM0B,EAAUL,KACV,EAACuB,EAAS,EAACC,IAAeC,EAAAA,EAAAA,UAASH,GAgBzC,OAfAI,EAAAA,EAAAA,YAAU,KACJJ,IACFE,GAAY,GAEZG,YACE,SAAAC,EAAA,OACkC,QADlCA,EACEC,SAASC,eAAeT,EAAKU,WAAG,IAAAH,OAAA,EAAhCA,EAAkCI,eAAe,CAC/CC,MAAO,SACPC,OAAQ,UACR,GACJ,KAEJ,GACC,CAACZ,EAAyBD,EAAKU,KAGhC5C,EAAAA,cAACgD,EAAAA,GAAS,CAACJ,GAAIV,EAAKU,GAAIzC,UAAW,gDAAgDe,EAAQS,QACzF3B,EAAAA,cAACT,EAAAA,EAAc,CACbQ,WAAW,KACXF,gBAAgB,WAChBJ,OAAQ2C,EACR1C,SAAUA,IAAM2C,GAAaD,GAC7BzC,OAAQA,IAAMuC,EAAKe,KACnBrD,KAAMA,IAAMI,EAAAA,cAAA,QAAMmB,wBAAyB,CAAEC,OAAQc,EAAKgB,iBAElD,EC9CVC,EAAgB3D,IAAA,IAAC,MAAE4D,EAAK,WAAEC,GAAY7D,EAAA,OAC1C4D,EAAME,KAAKpB,GAASlC,EAAAA,cAACiC,EAAY,CAACsB,IAAKrB,EAAKU,GAAIV,KAAMA,EAAMC,wBAAyBD,EAAKU,KAAOS,KAAe,EAErGG,EAAWC,IAA4B,IAA3B,MAAEL,EAAK,WAAEC,GAAYI,EAC5C,MAAMC,EAAcN,EAAMO,MAAM,EAAGP,EAAMQ,OAAS,GAC5CC,EAAeT,EAAMO,MAAMP,EAAMQ,OAAS,EAAGR,EAAMQ,QACzD,OACE5D,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAKG,UAAU,OACbH,EAAAA,cAAA,OAAKG,UAAU,YACbH,EAAAA,cAACmD,EAAa,CAACC,MAAOM,EAAaL,WAAYA,KAEjDrD,EAAAA,cAAA,OAAKG,UAAU,YACbH,EAAAA,cAACmD,EAAa,CAACC,MAAOS,EAAcR,WAAYA,MAGnD,E,wBCZP,MAAM,MAAE9B,EAAK,KAAE3B,EAAI,cAAEkE,GAAkBC,GAC/BxC,MAAOyC,EAAUd,YAAae,GAAmBC,EAAAA,GAenDC,EAAsCL,EAZpCM,MAAK,CAACC,EAAGC,KACb,MAAMC,EAAQF,EAAEpB,KAAKuB,cACfC,EAAQH,EAAErB,KAAKuB,cACrB,OAAID,EAAQE,GACF,EAENF,EAAQE,EACH,EAEF,CAAC,IAKL,MAAMC,EAAeA,KAC1B,MAAM,EAACC,EAAmB,EAACC,IAAyBtC,EAAAA,EAAAA,UAAS,MAS7D,OARAC,EAAAA,EAAAA,YAAU,KAGR,MAAMsC,EAASC,SAASC,KAAKC,QAAQ,IAAK,IACtCb,EAAoBc,MAAM/C,GAASA,EAAKU,KAAOiC,KACjDD,EAAsBC,EACxB,GACC,IAED7E,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACkF,EAAAA,EAAG,CAAC3D,MAAOyC,EAAUd,YAAae,IACnCjE,EAAAA,cAACM,EAAAA,EAAI,KACHN,EAAAA,cAAA,OAAKG,UAAU,0BACbH,EAAAA,cAAA,OAAKG,UAAU,qCACbH,EAAAA,cAAA,OAAKG,UAAU,4BACbH,EAAAA,cAACqB,EAAAA,EAAS,CAACE,MAAOA,EAAOpB,UAAU,YAAYqB,IAAI,OACnDxB,EAAAA,cAACgB,EAAAA,EAAQ,CAACC,KAAMrB,QAKxBI,EAAAA,cAACM,EAAAA,EAAI,CAACC,QAAQ,SACZP,EAAAA,cAAA,OAAKG,UAAU,0BACbH,EAAAA,cAAA,OAAKG,UAAU,sCACbH,EAAAA,cAACwD,EAAQ,CAACJ,MAAOe,EAAqBd,WAAYsB,OAIvD,ECrDP,MADaQ,IAAMnF,EAAAA,cAAC0E,EAAY,K,8CCDzB,MAAMU,EAAoBC,IAAAA,MAAgB,CAC/CC,OAAQD,IAAAA,OAAiBE,WACzBC,UAAWH,IAAAA,OAAiBE,WAC5BE,cAAeJ,IAAAA,OAAiBE,WAChCrC,YAAamC,IAAAA,OACbK,KAAML,IAAAA,OAAiBE,WACvBI,KAAMN,IAAAA,OAAiBE,WACvBhE,MAAO8D,IAAAA,OAAiBE,aAGMF,IAAAA,MAAgB,CAC9C9D,MAAO8D,IAAAA,OACPO,WAAYP,IAAAA,QAAkBD,GAAmBG,aAGdF,IAAAA,MAAgB,CACnDzC,GAAIyC,IAAAA,OAAiBE,WACrBtC,KAAMoC,IAAAA,OAAiBE,WACvBrC,YAAamC,IAAAA,OAAiBE,Y","sources":["webpack://cloud.italia.it-site/./src/components/AccordionEntry.js","webpack://cloud.italia.it-site/./src/components/hero/Hero.js","webpack://cloud.italia.it-site/./src/components/hero/HeroBody.js","webpack://cloud.italia.it-site/./src/components/hero/HeroTitle.js","webpack://cloud.italia.it-site/./src/components/glossary/GlossaryTerm.js","webpack://cloud.italia.it-site/./src/components/glossary/Glossary.js","webpack://cloud.italia.it-site/./src/layouts/GlossaryPage.js","webpack://cloud.italia.it-site/./src/pages/glossario.js","webpack://cloud.italia.it-site/./src/utils/proptypes.js"],"sourcesContent":["import React from 'react';\nimport { AccordionBody, AccordionHeader } from 'design-react-kit';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const AccordionEntry = ({\n  active,\n  onToggle,\n  header,\n  body,\n  headerClassName = '',\n  bodyClassName = '',\n  headerLang = undefined,\n}) => (\n  <>\n    <AccordionHeader\n      active={active}\n      onToggle={onToggle}\n      lang={headerLang}\n      className={classNames(headerClassName, { 'text-dark': active })}\n    >\n      {header()}\n    </AccordionHeader>\n    <AccordionBody active={active} className={bodyClassName}>\n      {body()}\n    </AccordionBody>\n  </>\n);\n\nAccordionEntry.propTypes = {\n  active: PropTypes.bool.isRequired,\n  onToggle: PropTypes.func.isRequired,\n  header: PropTypes.func.isRequired,\n  headerClassName: PropTypes.string,\n  headerLang: PropTypes.string,\n  body: PropTypes.func.isRequired,\n  bodyClassName: PropTypes.string,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const Hero = ({ bgColor = '', xPadding = true, yPaddingXLScreen = true, children }) => {\n  const heroClasses = classNames('py-5', {\n    'bg-primary': bgColor === 'primary',\n    'lightgrey-bg-a2': bgColor === 'light',\n  });\n  const containerClass = classNames('container', {\n    'py-xl-5': yPaddingXLScreen,\n    'px-3 px-md-0': xPadding,\n  });\n  return (\n    <div className={heroClasses}>\n      <div className={containerClass}>{children}</div>\n    </div>\n  );\n};\n\nHero.propTypes = {\n  bgColor: PropTypes.oneOf(['primary', 'light']),\n  xPadding: PropTypes.bool,\n  yPaddingXLScreen: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n};\n","import React from 'react';\nimport { createUseStyles } from 'react-jss';\nimport PropTypes from 'prop-types';\n\nconst useStyles = createUseStyles({\n  body: {\n    fontSize: '1.3rem',\n  },\n});\n\nexport const HeroBody = ({ html }) => {\n  const classes = useStyles();\n  return <div className={classes.body} dangerouslySetInnerHTML={{ __html: html }} />;\n};\n\nHeroBody.propTypes = {\n  html: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\n\nexport const HeroTitle = ({ linkTo = null, title, className = '', Tag = 'h3' }) => (\n  <Tag className=\"h1 mb-4\">\n    {linkTo ? (\n      <Link to={linkTo} className={`text-decoration-none ${className}`}>\n        {title}\n      </Link>\n    ) : (\n      <span className={className}>{title}</span>\n    )}\n  </Tag>\n);\n\nHeroTitle.propTypes = {\n  className: PropTypes.string,\n  linkTo: PropTypes.string,\n  Tag: PropTypes.string,\n  title: PropTypes.string.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport { Accordion } from 'design-react-kit';\nimport PropTypes from 'prop-types';\nimport { createUseStyles } from 'react-jss';\nimport { AccordionEntry } from '../AccordionEntry.js';\nimport { glossaryTermPropTypes } from '../../utils/proptypes.js';\n\nconst useStyles = createUseStyles({\n  list: {\n    '@global': {\n      ul: {\n        paddingLeft: '24px',\n      },\n      li: {\n        marginBottom: '16px',\n      },\n      'li::marker': {\n        color: 'var(--primary)',\n      },\n    },\n  },\n});\n\nexport const GlossaryTerm = ({ term, expandAndScrollIntoView = false }) => {\n  const classes = useStyles();\n  const [expanded, setExpanded] = useState(expandAndScrollIntoView);\n  useEffect(() => {\n    if (expandAndScrollIntoView) {\n      setExpanded(true);\n      // We need to wait for animation in order to center the term properly\n      setTimeout(\n        () =>\n          document.getElementById(term.id)?.scrollIntoView({\n            block: 'center',\n            inline: 'center',\n          }),\n        300\n      );\n    }\n  }, [expandAndScrollIntoView, term.id]);\n\n  return (\n    <Accordion id={term.id} className={`bg-white shadow-lg my-0 my-lg-3 mx-0 mx-lg-2 ${classes.list}`}>\n      <AccordionEntry\n        headerLang=\"en\"\n        headerClassName=\"border-0\"\n        active={expanded}\n        onToggle={() => setExpanded(!expanded)}\n        header={() => term.name}\n        body={() => <span dangerouslySetInnerHTML={{ __html: term.description }} />}\n      />\n    </Accordion>\n  );\n};\n\nGlossaryTerm.propTypes = {\n  term: glossaryTermPropTypes,\n  expandAndScrollIntoView: PropTypes.bool,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { glossaryTermPropTypes } from '../../utils/proptypes.js';\nimport { GlossaryTerm } from './GlossaryTerm.js';\n\nconst GlossaryTerms = ({ terms, expandTerm }) =>\n  terms.map((term) => <GlossaryTerm key={term.id} term={term} expandAndScrollIntoView={term.id === expandTerm} />);\n\nexport const Glossary = ({ terms, expandTerm }) => {\n  const firstColumn = terms.slice(0, terms.length / 2);\n  const secondColumn = terms.slice(terms.length / 2, terms.length);\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-lg-6\">\n          <GlossaryTerms terms={firstColumn} expandTerm={expandTerm} />\n        </div>\n        <div className=\"col-lg-6\">\n          <GlossaryTerms terms={secondColumn} expandTerm={expandTerm} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nGlossary.propTypes = {\n  terms: PropTypes.arrayOf(glossaryTermPropTypes),\n  expandTerm: PropTypes.string,\n};\n","import React, { useEffect, useState } from 'react';\nimport content from '../../contents/glossary-page/glossary.yml';\nimport { HeroTitle } from '../components/hero/HeroTitle.js';\nimport { HeroBody } from '../components/hero/HeroBody.js';\nimport { Hero } from '../components/hero/Hero.js';\nimport { Glossary } from '../components/glossary/Glossary.js';\nimport { SEO } from '../components/SEO.js';\nimport seo from '../../contents/seo.yml';\n\nconst { title, body, glossaryTerms } = content;\nconst { title: seoTitle, description: seoDescription } = seo.glossaryPage;\n\nconst sortTermsByName = (terms) =>\n  terms.sort((a, b) => {\n    const aName = a.name.toUpperCase();\n    const bName = b.name.toUpperCase();\n    if (aName < bName) {\n      return -1;\n    }\n    if (aName > bName) {\n      return 1;\n    }\n    return 0;\n  });\n\nconst glossaryTermsSorted = sortTermsByName(glossaryTerms);\n\nexport const GlossaryPage = () => {\n  const [expandedTermOnInit, setExpandedTermOnInit] = useState(null);\n  useEffect(() => {\n    // This useEffect is used to understand if there is an expanded term in the page on init, based on the term id in the url hash.\n    // Due to the fact that the url hash depends on the client, this computation can't be done in the SSR phase.\n    const termId = location.hash.replace('#', '');\n    if (glossaryTermsSorted.some((term) => term.id === termId)) {\n      setExpandedTermOnInit(termId);\n    }\n  }, []);\n  return (\n    <>\n      <SEO title={seoTitle} description={seoDescription} />\n      <Hero>\n        <div className=\"row align-items-center\">\n          <div className=\"offset-lg-1 col-lg-6 mt-4 mt-lg-0\">\n            <div className=\"text-center text-lg-left\">\n              <HeroTitle title={title} className=\"text-info\" Tag=\"h1\" />\n              <HeroBody html={body} />\n            </div>\n          </div>\n        </div>\n      </Hero>\n      <Hero bgColor=\"light\">\n        <div className=\"row align-items-center\">\n          <div className=\"offset-lg-1 col-lg-10 mt-4 mt-lg-0\">\n            <Glossary terms={glossaryTermsSorted} expandTerm={expandedTermOnInit} />\n          </div>\n        </div>\n      </Hero>\n    </>\n  );\n};\n","import React from 'react';\nimport { GlossaryPage } from '../layouts/GlossaryPage.js';\n\nconst Page = () => <GlossaryPage />;\nexport default Page;\n","import PropTypes from 'prop-types';\n\nexport const referencePropType = PropTypes.exact({\n  action: PropTypes.string.isRequired,\n  ariaLabel: PropTypes.string.isRequired,\n  ariaLabelIcon: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  icon: PropTypes.string.isRequired,\n  link: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n});\n\nexport const resourcePropType = PropTypes.exact({\n  title: PropTypes.string,\n  references: PropTypes.arrayOf(referencePropType).isRequired,\n});\n\nexport const glossaryTermPropTypes = PropTypes.exact({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n});\n"],"names":["AccordionEntry","_ref","active","onToggle","header","body","headerClassName","bodyClassName","headerLang","React","AccordionHeader","lang","className","classNames","AccordionBody","Hero","bgColor","xPadding","yPaddingXLScreen","children","heroClasses","containerClass","useStyles","createUseStyles","fontSize","HeroBody","html","classes","dangerouslySetInnerHTML","__html","HeroTitle","linkTo","title","Tag","Link","to","list","ul","paddingLeft","li","marginBottom","color","GlossaryTerm","term","expandAndScrollIntoView","expanded","setExpanded","useState","useEffect","setTimeout","_document$getElementB","document","getElementById","id","scrollIntoView","block","inline","Accordion","name","description","GlossaryTerms","terms","expandTerm","map","key","Glossary","_ref2","firstColumn","slice","length","secondColumn","glossaryTerms","content","seoTitle","seoDescription","seo","glossaryTermsSorted","sort","a","b","aName","toUpperCase","bName","GlossaryPage","expandedTermOnInit","setExpandedTermOnInit","termId","location","hash","replace","some","SEO","Page","referencePropType","PropTypes","action","isRequired","ariaLabel","ariaLabelIcon","icon","link","references"],"sourceRoot":""}